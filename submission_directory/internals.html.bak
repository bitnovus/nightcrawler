<html>
<title>Project Nightcrawler Internal Structure </title>
<h1>Project Nightcrawler Internal Structure </h1>

<body>
    <hr></hr>
    <h2>Application Framework</h2>
    <p>
    The application was written using
    <a href="http://flask.pocoo.org/docs/quickstart/">Flask</a>.
    Flask is a Python microframework. It is compatible with mod_wsgi, uWSGI,
    FastCGI, CGI and other WSGI containers.
    </p>

    <h2>Database</h2>
    <p>
    The database utilizes a PostgreSQL database provided through
    <a href="https://postgres.heroku.com/">Heroku Postgres</a>. Heroku Postgres
    is based on products and services provided by Amazon Web Services.
    One way to maintain this database is to use pgAdmin. More details about pgAdmin
    can be found <a href="http://www.pgadmin.org/">here</a>.
    </p>

    <h2>Revision Control</h2>
    <p>
    We used Git in concjunction with GitHub to develop the application.
    </p>

    <h2>Development Server Configuration</h2>
    <p>
    The development server is hosted with Heroku. You can see details on how to
    deploy code to Heroku <a href="https://devcenter.heroku.com/articles/git">here</a>.
    Deployment through Heroku depends on using Git. We use Gunicorn, a WSGI HTTP server
    written in Python, to run our Flask application. You can find details on how
    Flask applications work with Heroku
    <a href="https://devcenter.heroku.com/articles/python">here</a>.
    (Please note that a Heroku deployment depends on a Procfile to specify the 
    process type. This is discussed under the "Deploy your application to Heroku"
    section.)
    </p>

    </p>
    Heroku is unique in the way that it partitions processes on its servers. They use
    "dynos" which can be understood as a "virtualized Unix container" running a
    single command. (See
    <a href="https://devcenter.heroku.com/articles/dynos#features">here</a> to see
    more detail about using dynos with Heroku.) In order to increase performance, you need
    to add more dynos and you can see pricing <a href="https://www.heroku.com/pricing">here</a>.
    (Note that one dyno is free with Heroku. More dynos will lead to a monthly charge.)
    </p>
    <h2>Production Server Configuration</h2>
    <p>
    The production server is hosted on Amazon Web Services with a Micro on-demand
    instance in the US East Region. The operating system is Ubuntu 12.04 LTS. The
    web server lighttpd (pronounced as lighty) was installed using apt-get. More
    details about lighttpd can be found
    <a href="http://www.lighttpd.net/">here</a>. The application files are located
    at "/var/www/nightcrawler". Note that lighttpd runs under the user "www-data"
    and the group "www-data".
    </p>
    <p>
    FastCGI, alias, and rewrite modules need to be enabled in the lighttpd configuration
    file. You can find an example of a Flask FastCGI configuration for lighttpd 
    <a href="http://flask.pocoo.org/docs/deploying/fastcgi/#configuring-lighttpd">here</a>.
    Please note that there is a lighttpd bug when a FastCGI application is installed
    in the root directory. A fix titled "LighttpdCGIRootFix" was used to address this
    issue. Look <a href="http://werkzeug.pocoo.org/docs/contrib/fixers/">here</a>
    for more details.
    </p>
    <h2>Data Gathering</h2>
    <p>
    APIs were not freely available for the data necessary to create this web
    service. As such, all data is scraped from various transportation websites
    through HTTP calls and regular expressions. We gathered data from
    <a href="http://us.megabus.com">us.megabus.com</a>,
    <a href="http://www.orbitz.com">www.orbitz.com</a>,
    <a href="http://www.amtrak.com">www.amtrak.com</a>, and
    <a href="http://www.njtransit.com">www.njtransit.com</a>.
    </p>
    <p>
    In an effort to minimize delays through the multiple HTTP calls, we utilize
    multiprocessing through Python's multiprocessing module. More details can
    be found <a href="http://docs.python.org/2/library/multiprocessing.html">here</a>.
    </p>
    <h2>Directory Structure</h2>
    <p>
    Static files can generally be found under the "static" directory. The directory
    contains three directories titled "css", "js", and "img". CSS files can be found under
    "css" directory; JS files can be found under "js" directory; Image files can be found
    under the "img" directory. The favicon.ico file is found directly in the "static"
    directory. HTML files can be found under the "templates" directory.
    </p>
    <h2>Web Structure</h2>
    <p>
    For styling, we use Twitter Bootstrap (see
    <a href="http://twitter.github.io/bootstrap/">here</a>.) More specifically, we 
    use toggle switches by Ionu»õ Colceriu which can be found
    <a href="http://ghinda.net/css-toggle-switch/">here</a>. We also make use of jQuery's
    <a href="http://jqueryui.com/datepicker">datepicker</a> and
    <a href="http://jqueryui.com/autocomplete"><autocomplete>autocomplete</a> widgets,
    as well as a <a href=http://www.malsup.com/jquery/block/>BlockUI</a> plugin written
    by Mike Alsup.
    </p>
</body>

</html>
